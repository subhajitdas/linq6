{"version":3,"sources":["../src/enumerable.js"],"names":[],"mappings":"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","file":"enumerable.js","sourcesContent":["/**\r\n * @typedef {function} predicate\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {boolean} If the item satisfies the filter criteria.\r\n */\r\n\r\n/**\r\n * @typedef {function} selector\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The transformed item.\r\n */\r\n\r\n/**\r\n * @typedef {function} aggregator\r\n * @param {*} aggregate The aggregated value.\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The aggregated value.\r\n */\r\n\r\n\r\n/**\r\n * A default projection function.\r\n * @param {*} item The item that will be projected back.\r\n * @returns {*} The supplied value itself as is.\r\n */\r\nconst SELF_SELECTOR = x => x;\r\nconst ALWAYS_TRUE_PREDICATE = () => true;\r\n\r\n/**\r\n * Represents a iterable itself. Provides a set of methods for querying collections.\r\n */\r\nclass Enumerable {\r\n    /**\r\n     * Creates a new enumerable.\r\n     */\r\n    constructor(iterable) {\r\n        if (isIterable(iterable)) {\r\n            this.iterable = iterable;\r\n        } else {\r\n            throw new TypeError('Must be iterable.');\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Applies an aggregate function over a sequence. \r\n     * @param {aggregator} aggregateFn An aggregate function that will be invoked for each element.\r\n     * @param {*} [seed=First element in the sequence] The specified seed value is used as the initial aggregate value.\r\n     * @param {selector} [resultSelector=SELF_SELECTOR] The specified result selector is used to project the aggregated value.\r\n     * @returns {*} The aggregated value.\r\n     */\r\n    aggregate(aggregateFn, seed, resultSelector = SELF_SELECTOR) {\r\n        let iterator = this[Symbol.iterator]();\r\n        if (seed === undefined) {\r\n            let firstItem = iterator.next();\r\n            if (firstItem.done) {\r\n                return resultSelector();\r\n            } else {\r\n                seed = firstItem.value;\r\n            }\r\n        }\r\n               \r\n        for(let item = iterator.next(); !item.done; item = iterator.next()){\r\n            seed = aggregateFn(seed, item.value); \r\n        }\r\n        \r\n        return resultSelector(seed);\r\n    }\r\n\r\n    /**\r\n     * Projects each element of a sequence into a new form.\r\n     * @param {selector} selector A transform function to apply to each element.\r\n     * @returns {Enumerable}\r\n     */\r\n    select(selector = SELF_SELECTOR) {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        let nextItem = iterator.next();\r\n                        if (nextItem.done) {\r\n                            return {\r\n                                done: true\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                value: selector(nextItem.value),\r\n                                done: false\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Filters a collection of values based on a predicate.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    where(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let iterator = this.iterable[Symbol.iterator](),\r\n            next = function() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    if (predicate(nextItem.value)) {\r\n                        return {\r\n                            value: nextItem.value,\r\n                            done: false\r\n                        };\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Iterator\r\n     */\r\n    [Symbol.iterator]() {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return {\r\n            next() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates an Enumerable from iterable collections.\r\n     * @param {iterable} source A iterable source.\r\n     * @returns {Enumerable}\r\n     */\r\n    static from(source) {\r\n        return new Enumerable(source);\r\n    }\r\n}\r\n\r\nfunction isIterable(obj) {\r\n    return obj[Symbol.iterator] && (typeof obj[Symbol.iterator] === 'function');\r\n}\r\n\r\nexport {Enumerable};"]}