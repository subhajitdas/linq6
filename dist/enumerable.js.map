{"version":3,"sources":["../src/enumerable.js"],"names":["SELF_SELECTOR","x","ALWAYS_TRUE_PREDICATE","ALWAYS_FALSE_PREDICATE","DEFAULT_EQUALITY_COMPARER","source","target","Enumerable","iterable","isIterable","TypeError","aggregateFn","seed","resultSelector","iterator","Symbol","undefined","firstItem","next","done","value","item","predicate","currentIterable","iterableToConcat","isFirstIterableDone","nextItem","element","equalityComparer","count","distinctItems","distinctItem","push","Error","innerIterable","outerKeySelector","innerKeySelector","keyComparer","nextOuterItem","nextInnerItem","selector","collectionSelector","parentCollectionIterator","select","childCollectionIterator","empty","nextChildItem","nextParentCollection","matched","index","continueSkip","continueTake","Array","from","obj"],"mappings":"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","file":"enumerable.js","sourcesContent":["/**\r\n * @typedef {function} predicate\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {boolean} If the item satisfies the filter criteria.\r\n */\r\n\r\n/**\r\n * @typedef {function} selector\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The transformed item.\r\n */\r\n\r\n/**\r\n * @typedef {function} aggregator\r\n * @param {*} aggregate The aggregated value.\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The aggregated value.\r\n */\r\n\r\n/**\r\n * @typedef {function} equalityComparer\r\n * @param {*} source Indivisual item in the sequence.\r\n * @param {*} target Target element to compare with.\r\n * @returns {boolean} If the source and target are equal.\r\n */\r\n\r\n\r\n/**\r\n * A default [selector]{@link selector} function that returns the element back.\r\n * @alias RETURN SELF\r\n * @param {*} item The item that will be projected back.\r\n * @returns {*} The supplied value itself as is.\r\n */\r\nconst SELF_SELECTOR = x => x;\r\n\r\n/**\r\n * A default [predicate]{@link predicate} function that always returns true.\r\n * @alias ALWAYS TRUE\r\n * @returns {Boolean} Always returns true.\r\n */\r\nconst ALWAYS_TRUE_PREDICATE = () => true;\r\n\r\n/**\r\n * A default [predicate]{@link predicate} function that always returns false.\r\n * @alias ALWAYS FALSE\r\n * @returns {Boolean} Always returns false.\r\n */\r\nconst ALWAYS_FALSE_PREDICATE = () => false;\r\n\r\n/**\r\n * A default [equalityComparer]{@link equalityComparer} function that uses default comparison.\r\n * @alias DEFAULT COMPARER\r\n * @returns {boolean} If the source and target are equal (is in == operator).\r\n */\r\nconst DEFAULT_EQUALITY_COMPARER = (source, target) => source == target;\r\n\r\n/**\r\n * Represents a iterable itself. Provides a set of methods for querying collections.\r\n */\r\nclass Enumerable {\r\n    /**\r\n     * Creates a new enumerable.\r\n     */\r\n    constructor(iterable) {\r\n        if (isIterable(iterable)) {\r\n            this.iterable = iterable;\r\n        } else {\r\n            throw new TypeError('Must be iterable.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies an aggregate function over a sequence. \r\n     * @param {aggregator} aggregateFn An aggregate function that will be invoked for each element.\r\n     * @param {*} [seed=First element in the sequence] The specified seed value is used as the initial aggregate value.\r\n     * @param {selector} [resultSelector=SELF_SELECTOR] The specified result selector is used to project the aggregated value.\r\n     * @returns {*} The aggregated value.\r\n     */\r\n    aggregate(aggregateFn, seed, resultSelector = SELF_SELECTOR) {\r\n        let iterator = this[Symbol.iterator]();\r\n        if (seed === undefined) {\r\n            let firstItem = iterator.next();\r\n            if (firstItem.done) {\r\n                return resultSelector();\r\n            } else {\r\n                seed = firstItem.value;\r\n            }\r\n        }\r\n\r\n        for (let item = iterator.next(); !item.done; item = iterator.next()) {\r\n            seed = aggregateFn(seed, item.value);\r\n        }\r\n\r\n        return resultSelector(seed);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all elements of a sequence satisfy a condition.\r\n     * @param {predicate} [predicate=ALWAYS TRUE] A function to test each source element for a condition.\r\n     * @returns {boolean}\r\n     */\r\n    all(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (!predicate(item)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determines whether any element of a sequence exists or satisfies a condition.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {boolean}\r\n     */\r\n    any(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Concatenates with another sequence.\r\n     * @param {iterable} iterable The sequence to concatenate to the current sequence.\r\n     * @returns {Enumerable}\r\n     */\r\n    concat(iterable) {\r\n        if (!isIterable(iterable)) {\r\n            throw new TypeError('Sequence to concat must be iterable.');\r\n        }\r\n        let currentIterable = this[Symbol.iterator](),\r\n            iterableToConcat = iterable[Symbol.iterator](),\r\n            isFirstIterableDone = false;\r\n\r\n        const next = function () {\r\n            let nextItem = currentIterable.next();\r\n            if (nextItem.done && !isFirstIterableDone) {\r\n                currentIterable = iterableToConcat;\r\n                isFirstIterableDone = true;\r\n                return next();\r\n            } else if (nextItem.done && isFirstIterableDone) {\r\n                return {\r\n                    done: true\r\n                };\r\n            } else {\r\n                return {\r\n                    value: nextItem.value,\r\n                    done: false\r\n                };\r\n            }\r\n        }\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determines if the sequence contains a specified element by using the equality comparer.\r\n     * @param {*} element The element to compare with.\r\n     * @param {equalityComparer} [equalityComparer] A function to determine equality of each element with specified element.\r\n     */\r\n    contains(element, equalityComparer = DEFAULT_EQUALITY_COMPARER) {\r\n        for (let item of this) {\r\n            if (equalityComparer(item, element)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of elements in a sequence.\r\n     * If a condition is specified then returns a how many elements in the sequence satisfy it.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {Number}\r\n     */\r\n    count(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let count = 0;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns distinct elements from the sequence.\r\n     * @params {equalityComparer} [equalityComparer=DEFAULT_EQUALITY_COMPARER] A function to test if two elements in the sequence are equal.\r\n     * @returns {Enumerable}\r\n     */\r\n    distinct(equalityComparer = DEFAULT_EQUALITY_COMPARER) {\r\n        const currentIterable = this[Symbol.iterator]();\r\n        const distinctItems = [];\r\n        const next = function () {\r\n            const nextItem = currentIterable.next();\r\n            if (nextItem.done) {\r\n                return {\r\n                    done: true\r\n                };\r\n            } else {\r\n                for (const distinctItem of distinctItems) {\r\n                    if (equalityComparer(nextItem.value, distinctItem)) {\r\n                        return next();\r\n                    }\r\n                }\r\n                distinctItems.push(nextItem.value);\r\n                return {\r\n                    done: false,\r\n                    value: nextItem.value\r\n                };\r\n            }\r\n        };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the first element in a sequence that satisfies a specified condition.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence is empty.\r\n     * @throws {Error} If the sequence contains no matching element.\r\n     */\r\n    first(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        throw new Error('Sequence contains no matching element.');\r\n    }\r\n\r\n    /**\r\n     * Returns the first element of the sequence that satisfies a condition or null if no such element is found.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     */\r\n    firstOrDefault(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Correlates the elements current sequence with another sequences based on keys.\r\n     * @param {iterable} innerIterable The sequence to join to current sequence.\r\n     * @param {selector} outerKeySelector A function to extract key from current sequence.\r\n     * @param {selector} innerKeySelector A function to extract key from the sequence to join.\r\n     * @param {selector} resultSelector A function to generate result element from two matching element.\r\n     * @param {equalityComparer} [keyComparer=DEFAULT_EQUALITY_COMPARER] A function to check equality of keys.\r\n     */\r\n    join(innerIterable, outerKeySelector, innerKeySelector, resultSelector, keyComparer = DEFAULT_EQUALITY_COMPARER) {\r\n        if (!isIterable(innerIterable)) {\r\n            throw new TypeError('Sequence to join must be iterable.');\r\n        }\r\n        const iterator = this[Symbol.iterator]();\r\n        const next = function () {\r\n            const nextOuterItem = iterator.next();\r\n            if (nextOuterItem.done) {\r\n                return {\r\n                    done: true\r\n                };\r\n            } else {\r\n                for (const nextInnerItem of innerIterable) {\r\n                    if (keyComparer(\r\n                        outerKeySelector(nextOuterItem.value),\r\n                        innerKeySelector(nextInnerItem))) {\r\n                        return {\r\n                            value: resultSelector(nextOuterItem.value, nextInnerItem),\r\n                            done: false\r\n                        };\r\n                    }\r\n                }\r\n                return next();\r\n            }\r\n        };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Projects each element of a sequence into a new form.\r\n     * @param {selector} selector A transform function to apply to each element.\r\n     * @returns {Enumerable}\r\n     */\r\n    select(selector = SELF_SELECTOR) {\r\n        let iterator = this[Symbol.iterator]();\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        let nextItem = iterator.next();\r\n                        if (nextItem.done) {\r\n                            return {\r\n                                done: true\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                value: selector(nextItem.value),\r\n                                done: false\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Projects a collection in each element of a sequence, flattens it,\r\n     * and invokes a result selector function to project the resulting sequence.\r\n     * @param {selector} collectionSelector A function to apply to each element to get the intermediate collection.\r\n     * @param {selector} [resultSelector] A transform function to apply to each element of final flattened sequence.\r\n     * @returns {Enumerable}\r\n     * @throws {TypeError} If the collection is not iterable.\r\n    */\r\n    selectMany(collectionSelector = SELF_SELECTOR, resultSelector = SELF_SELECTOR) {\r\n        let parentCollectionIterator = this.select(collectionSelector)[Symbol.iterator](),\r\n            childCollectionIterator = Enumerable.empty()[Symbol.iterator](),\r\n            next = function () {\r\n                let nextChildItem = childCollectionIterator.next();\r\n                if (nextChildItem.done) {\r\n                    let nextParentCollection = parentCollectionIterator.next();\r\n                    if (nextParentCollection.done) {\r\n                        return {\r\n                            done: true\r\n                        };\r\n                    } else {\r\n                        if (!isIterable(nextParentCollection.value)) {\r\n                            throw new TypeError('Collection must be iterable.');\r\n                        }\r\n                        childCollectionIterator = nextParentCollection.value[Symbol.iterator]();\r\n                        return next();\r\n                    }\r\n                } else {\r\n                    return {\r\n                        value: resultSelector(nextChildItem.value),\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the only element of a sequence that satisfies the specified condition.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence is empty.\r\n     * @throws {Error} If the sequence contains no matching element.\r\n     * @throws {Error} If the sequence contains more than one matching element.\r\n     */\r\n    single(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let matched = null;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                if (matched) {\r\n                    throw new Error('Sequence contains more than one matching element');\r\n                } else {\r\n                    matched = item;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (matched) {\r\n            return matched;\r\n        }\r\n\r\n        throw new Error('Sequence contains no matching element.');\r\n    }\r\n\r\n    /**\r\n     * Returns the only element of a sequence that satisfies a specified condition or null if no such element exists.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence contains more than one matching element.\r\n     */\r\n    singleOrDefault(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let matched = null;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                if (matched) {\r\n                    throw new Error('Sequence contains more than one matching element');\r\n                } else {\r\n                    matched = item;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (matched) {\r\n            return matched;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Skips the specified number of elements of a sequence.\r\n     * @param {Number} [count=0] The number of elements to skip.\r\n     * @returns {Enumerable}\r\n     */\r\n    skip(count = 0) {\r\n        let iterator = this[Symbol.iterator](),\r\n            index = 0,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (index++ < count) {\r\n                    return next();\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Skips elements in a sequence as long as a specified condition is true and then returns the remaining elements.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    skipWhile(predicate = ALWAYS_FALSE_PREDICATE) {\r\n        let iterator = this[Symbol.iterator](),\r\n            continueSkip = true,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (continueSkip && predicate(nextItem.value)) {\r\n                    return next();\r\n                } else {\r\n                    continueSkip = false;\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a specified number of elements from the begining of a sequence.\r\n     * @param {Number} [count=0] The number of elements to return.\r\n     * @returns {Enumerable}\r\n     */\r\n    take(count = 0) {\r\n        let iterator = this[Symbol.iterator](),\r\n            index = 0,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                index++;\r\n                if (nextItem.done || (index > count)) {\r\n                    return { done: true };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns elements in a sequence as long as a specified condition is true.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    takeWhile(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let iterator = this[Symbol.iterator](),\r\n            continueTake = true,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (continueTake && predicate(nextItem.value)) {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                } else {\r\n                    continueTake = false;\r\n                    return { done: true };\r\n                }\r\n            };\r\n\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an array. This method forces immediate evaluation and returns an array that contains the results. \r\n     * @returns {Array}\r\n     */\r\n    toArray() {\r\n        return Array.from(this);\r\n    }\r\n\r\n    /**\r\n     * Filters a collection of values based on a predicate.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    where(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let iterator = this[Symbol.iterator](),\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    if (predicate(nextItem.value)) {\r\n                        return {\r\n                            value: nextItem.value,\r\n                            done: false\r\n                        };\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an Enumerable from iterable collections.\r\n     * @param {iterable} source A iterable source.\r\n     * @returns {Enumerable}\r\n     */\r\n    static from(source) {\r\n        return new Enumerable(source);\r\n    }\r\n\r\n    /**\r\n     * Returns an empty Enumerable.\r\n     * @returns {Enumerable}\r\n     */\r\n    static empty() {\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        return {\r\n                            done: true\r\n                        };\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Iterator\r\n     */\r\n    [Symbol.iterator]() {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return {\r\n            next() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nfunction isIterable(obj) {\r\n    return obj[Symbol.iterator] && (typeof obj[Symbol.iterator] === 'function');\r\n}\r\n\r\nexport default Enumerable;"]}