{"version":3,"sources":["../src/enumerable.js"],"names":[],"mappings":"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","file":"enumerable.js","sourcesContent":["/**\r\n * @typedef {function} predicate\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {boolean} If the item satisfies the filter criteria.\r\n */\r\n\r\n/**\r\n * @typedef {function} selector\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The transformed item.\r\n */\r\n\r\n/**\r\n * @typedef {function} aggregator\r\n * @param {*} aggregate The aggregated value.\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The aggregated value.\r\n */\r\n\r\n/**\r\n * @typedef {function} equalityComparer\r\n * @param {*} source Indivisual item in the sequence.\r\n * @param {*} target Target element to compare with.\r\n * @returns {boolean} If the source and target are equal.\r\n */\r\n\r\n\r\n/**\r\n * A default [selector]{@link selector} function that returns the element back.\r\n * @alias RETURN SELF\r\n * @param {*} item The item that will be projected back.\r\n * @returns {*} The supplied value itself as is.\r\n */\r\nconst SELF_SELECTOR = x => x;\r\n\r\n/**\r\n * A default [predicate]{@link predicate} function that always returns true.\r\n * @alias ALWAYS TRUE\r\n * @returns {Boolean} Always returns true.\r\n */\r\nconst ALWAYS_TRUE_PREDICATE = () => true;\r\n\r\n/**\r\n * A default [predicate]{@link predicate} function that always returns false.\r\n * @alias ALWAYS FALSE\r\n * @returns {Boolean} Always returns false.\r\n */\r\nconst ALWAYS_FALSE_PREDICATE = () => false;\r\n\r\n/**\r\n * A default [equalityComparer]{@link equalityComparer} function that uses default comparison.\r\n * @alias DEFAULT COMPARER\r\n * @returns {boolean} If the source and target are equal (is in == operator).\r\n */\r\nconst DEFAULT_EQUALITY_COMPARER = (source, target) => source == target;\r\n\r\n/**\r\n * Represents a iterable itself. Provides a set of methods for querying collections.\r\n */\r\nclass Enumerable {\r\n    /**\r\n     * Creates a new enumerable.\r\n     */\r\n    constructor(iterable) {\r\n        if (isIterable(iterable)) {\r\n            this.iterable = iterable;\r\n        } else {\r\n            throw new TypeError('Must be iterable.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies an aggregate function over a sequence. \r\n     * @param {aggregator} aggregateFn An aggregate function that will be invoked for each element.\r\n     * @param {*} [seed=First element in the sequence] The specified seed value is used as the initial aggregate value.\r\n     * @param {selector} [resultSelector=SELF_SELECTOR] The specified result selector is used to project the aggregated value.\r\n     * @returns {*} The aggregated value.\r\n     */\r\n    aggregate(aggregateFn, seed, resultSelector = SELF_SELECTOR) {\r\n        let iterator = this[Symbol.iterator]();\r\n        if (seed === undefined) {\r\n            let firstItem = iterator.next();\r\n            if (firstItem.done) {\r\n                return resultSelector();\r\n            } else {\r\n                seed = firstItem.value;\r\n            }\r\n        }\r\n\r\n        for (let item = iterator.next(); !item.done; item = iterator.next()) {\r\n            seed = aggregateFn(seed, item.value);\r\n        }\r\n\r\n        return resultSelector(seed);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all elements of a sequence satisfy a condition.\r\n     * @param {predicate} [predicate=ALWAYS TRUE] A function to test each source element for a condition.\r\n     * @returns {boolean}\r\n     */\r\n    all(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (!predicate(item)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determines whether any element of a sequence exists or satisfies a condition.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {boolean}\r\n     */\r\n    any(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Concatenates with another sequence.\r\n     * @param {iterable} iterable The sequence to concatenate to the current sequence.\r\n     * @returns {Enumerable}\r\n     */\r\n    concat(iterable) {\r\n        if (!isIterable(iterable)) {\r\n            throw new TypeError('Sequence to concat must be iterable.');\r\n        }\r\n        let currentIterable = this[Symbol.iterator](),\r\n            iterableToConcat = iterable[Symbol.iterator](),\r\n            isFirstIterableDone = false;\r\n\r\n        const next = function () {\r\n            let nextItem = currentIterable.next();\r\n            if (nextItem.done && !isFirstIterableDone) {\r\n                currentIterable = iterableToConcat;\r\n                isFirstIterableDone = true;\r\n                return next();\r\n            } else if (nextItem.done && isFirstIterableDone) {\r\n                return {\r\n                    done: true\r\n                };\r\n            } else {\r\n                return {\r\n                    value: nextItem.value,\r\n                    done: false\r\n                };\r\n            }\r\n        }\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Determines if the sequence contains a specified element by using the equality comparer.\r\n     * @param {*} element The element to compare with.\r\n     * @param {equalityComparer} [equalityComparer] A function to determine equality of each element with specified element.\r\n     */\r\n    contains(element, equalityComparer = DEFAULT_EQUALITY_COMPARER) {\r\n        for (let item of this) {\r\n            if (equalityComparer(item, element)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of elements in a sequence.\r\n     * If a condition is specified then returns a how many elements in the sequence satisfy it.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {Number}\r\n     */\r\n    count(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let count = 0;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns distinct elements from the sequence.\r\n     * @params {equalityComparer} [equalityComparer=DEFAULT_EQUALITY_COMPARER] A function to test if two elements in the sequence are equal.\r\n     * @returns {Enumerable}\r\n     */\r\n    distinct(equalityComparer = DEFAULT_EQUALITY_COMPARER) {\r\n        const currentIterable = this[Symbol.iterator]();\r\n        const distinctItems = [];\r\n        const next = function () {\r\n            const nextItem = currentIterable.next();\r\n            if (nextItem.done) {\r\n                return {\r\n                    done: true\r\n                };\r\n            } else {\r\n                for (const distinctItem of distinctItems) {\r\n                    if (equalityComparer(nextItem.value, distinctItem)) {\r\n                        return next();\r\n                    }\r\n                }\r\n                distinctItems.push(nextItem.value);\r\n                return {\r\n                    done: false,\r\n                    value: nextItem.value\r\n                };\r\n            }\r\n        };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the first element in a sequence that satisfies a specified condition.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence is empty.\r\n     * @throws {Error} If the sequence contains no matching element.\r\n     */\r\n    first(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        throw new Error('Sequence contains no matching element.');\r\n    }\r\n\r\n    /**\r\n     * Returns the first element of the sequence that satisfies a condition or null if no such element is found.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     */\r\n    firstOrDefault(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Correlates the elements current sequence with another sequences based on keys.\r\n     * @param {iterable} innerIterable The sequence to join to current sequence.\r\n     * @param {selector} outerKeySelector A function to extract key from current sequence.\r\n     * @param {selector} innerKeySelector A function to extract key from the sequence to join.\r\n     * @param {selector} resultSelector A function to generate result element from two matching element.\r\n     * @param {equalityComparer} [keyComparer=DEFAULT_EQUALITY_COMPARER] A function to check equality of keys.\r\n     */\r\n    join(innerIterable, outerKeySelector, innerKeySelector, resultSelector, keyComparer = DEFAULT_EQUALITY_COMPARER) {\r\n        if (!isIterable(innerIterable)) {\r\n            throw new TypeError('Sequence to join must be iterable.');\r\n        }\r\n        const iterator = this[Symbol.iterator]();\r\n        const next = function () {\r\n            const nextOuterItem = iterator.next();\r\n            if (nextOuterItem.done) {\r\n                return {\r\n                    done: true\r\n                };\r\n            } else {\r\n                for (const nextInnerItem of innerIterable) {\r\n                    if (keyComparer(\r\n                        outerKeySelector(nextOuterItem.value),\r\n                        innerKeySelector(nextInnerItem))) {\r\n                        return {\r\n                            value: resultSelector(nextOuterItem.value, nextInnerItem),\r\n                            done: false\r\n                        };\r\n                    }\r\n                }\r\n                return next();\r\n            }\r\n        };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Projects each element of a sequence into a new form.\r\n     * @param {selector} selector A transform function to apply to each element.\r\n     * @returns {Enumerable}\r\n     */\r\n    select(selector = SELF_SELECTOR) {\r\n        let iterator = this[Symbol.iterator]();\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        let nextItem = iterator.next();\r\n                        if (nextItem.done) {\r\n                            return {\r\n                                done: true\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                value: selector(nextItem.value),\r\n                                done: false\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Projects a collection in each element of a sequence, flattens it,\r\n     * and invokes a result selector function to project the resulting sequence.\r\n     * @param {selector} collectionSelector A function to apply to each element to get the intermediate collection.\r\n     * @param {selector} [resultSelector] A transform function to apply to each element of final flattened sequence.\r\n     * @returns {Enumerable}\r\n     * @throws {TypeError} If the collection is not iterable.\r\n    */\r\n    selectMany(collectionSelector = SELF_SELECTOR, resultSelector = SELF_SELECTOR) {\r\n        let parentCollectionIterator = this.select(collectionSelector)[Symbol.iterator](),\r\n            childCollectionIterator = Enumerable.empty()[Symbol.iterator](),\r\n            next = function () {\r\n                let nextChildItem = childCollectionIterator.next();\r\n                if (nextChildItem.done) {\r\n                    let nextParentCollection = parentCollectionIterator.next();\r\n                    if (nextParentCollection.done) {\r\n                        return {\r\n                            done: true\r\n                        };\r\n                    } else {\r\n                        if (!isIterable(nextParentCollection.value)) {\r\n                            throw new TypeError('Collection must be iterable.');\r\n                        }\r\n                        childCollectionIterator = nextParentCollection.value[Symbol.iterator]();\r\n                        return next();\r\n                    }\r\n                } else {\r\n                    return {\r\n                        value: resultSelector(nextChildItem.value),\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the only element of a sequence that satisfies the specified condition.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence is empty.\r\n     * @throws {Error} If the sequence contains no matching element.\r\n     * @throws {Error} If the sequence contains more than one matching element.\r\n     */\r\n    single(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let matched = null;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                if (matched) {\r\n                    throw new Error('Sequence contains more than one matching element');\r\n                } else {\r\n                    matched = item;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (matched) {\r\n            return matched;\r\n        }\r\n\r\n        throw new Error('Sequence contains no matching element.');\r\n    }\r\n\r\n    /**\r\n     * Returns the only element of a sequence that satisfies a specified condition or null if no such element exists.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence contains more than one matching element.\r\n     */\r\n    singleOrDefault(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let matched = null;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                if (matched) {\r\n                    throw new Error('Sequence contains more than one matching element');\r\n                } else {\r\n                    matched = item;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (matched) {\r\n            return matched;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Skips the specified number of elements of a sequence.\r\n     * @param {Number} [count=0] The number of elements to skip.\r\n     * @returns {Enumerable}\r\n     */\r\n    skip(count = 0) {\r\n        let iterator = this[Symbol.iterator](),\r\n            index = 0,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (index++ < count) {\r\n                    return next();\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Skips elements in a sequence as long as a specified condition is true and then returns the remaining elements.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    skipWhile(predicate = ALWAYS_FALSE_PREDICATE) {\r\n        let iterator = this[Symbol.iterator](),\r\n            continueSkip = true,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (continueSkip && predicate(nextItem.value)) {\r\n                    return next();\r\n                } else {\r\n                    continueSkip = false;\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a specified number of elements from the begining of a sequence.\r\n     * @param {Number} [count=0] The number of elements to return.\r\n     * @returns {Enumerable}\r\n     */\r\n    take(count = 0) {\r\n        let iterator = this[Symbol.iterator](),\r\n            index = 0,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                index++;\r\n                if (nextItem.done || (index > count)) {\r\n                    return { done: true };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns elements in a sequence as long as a specified condition is true.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    takeWhile(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let iterator = this[Symbol.iterator](),\r\n            continueTake = true,\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (continueTake && predicate(nextItem.value)) {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                } else {\r\n                    continueTake = false;\r\n                    return { done: true };\r\n                }\r\n            };\r\n\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an array. This method forces immediate evaluation and returns an array that contains the results. \r\n     * @returns {Array}\r\n     */\r\n    toArray() {\r\n        return Array.from(this);\r\n    }\r\n\r\n    /**\r\n     * Filters a collection of values based on a predicate.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    where(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let iterator = this[Symbol.iterator](),\r\n            next = function () {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    if (predicate(nextItem.value)) {\r\n                        return {\r\n                            value: nextItem.value,\r\n                            done: false\r\n                        };\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an Enumerable from iterable collections.\r\n     * @param {iterable} source A iterable source.\r\n     * @returns {Enumerable}\r\n     */\r\n    static from(source) {\r\n        return new Enumerable(source);\r\n    }\r\n\r\n    /**\r\n     * Returns an empty Enumerable.\r\n     * @returns {Enumerable}\r\n     */\r\n    static empty() {\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        return {\r\n                            done: true\r\n                        };\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Iterator\r\n     */\r\n    [Symbol.iterator]() {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return {\r\n            next() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nfunction isIterable(obj) {\r\n    return obj[Symbol.iterator] && (typeof obj[Symbol.iterator] === 'function');\r\n}\r\n\r\nexport {Enumerable};"]}