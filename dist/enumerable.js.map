{"version":3,"sources":["../src/enumerable.js"],"names":[],"mappings":"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","file":"enumerable.js","sourcesContent":["/**\r\n * @typedef {function} predicate\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {boolean} If the item satisfies the filter criteria.\r\n */\r\n\r\n/**\r\n * @typedef {function} selector\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The transformed item.\r\n */\r\n\r\n/**\r\n * @typedef {function} aggregator\r\n * @param {*} aggregate The aggregated value.\r\n * @param {*} item Indivisual item in the sequence.\r\n * @returns {*} The aggregated value.\r\n */\r\n\r\n/**\r\n * @typedef {function} equalityComparer\r\n * @param {*} source Indivisual item in the sequence.\r\n * @param {*} target Target element to compare with.\r\n * @returns {boolean} If the source and target are equal.\r\n */\r\n\r\n\r\n/**\r\n * A default [selector]{@link selector} function that returns the element back.\r\n * @alias RETURN SELF\r\n * @param {*} item The item that will be projected back.\r\n * @returns {*} The supplied value itself as is.\r\n */\r\nconst SELF_SELECTOR = x => x;\r\n\r\n/**\r\n * A default [predicate]{@link predicate} function that always returns true.\r\n * @alias ALWAYS TRUE\r\n * @returns {Boolean} Always returns true.\r\n */\r\nconst ALWAYS_TRUE_PREDICATE = () => true;\r\n\r\n/**\r\n * A default [predicate]{@link predicate} function that always returns false.\r\n * @alias ALWAYS FALSE\r\n * @returns {Boolean} Always returns false.\r\n */\r\nconst ALWAYS_FALSE_PREDICATE = () => false;\r\n\r\n/**\r\n * A default [equalityComparer]{@link equalityComparer} function that uses default comparison.\r\n * @alias DEFAULT COMPARER\r\n * @returns {boolean}.\r\n */\r\nconst DEFAULT_EQUALITY_COMPARER = (source, target) => source == target;\r\n\r\n/**\r\n * Represents a iterable itself. Provides a set of methods for querying collections.\r\n */\r\nclass Enumerable {\r\n    /**\r\n     * Creates a new enumerable.\r\n     */\r\n    constructor(iterable) {\r\n        if (isIterable(iterable)) {\r\n            this.iterable = iterable;\r\n        } else {\r\n            throw new TypeError('Must be iterable.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Applies an aggregate function over a sequence. \r\n     * @param {aggregator} aggregateFn An aggregate function that will be invoked for each element.\r\n     * @param {*} [seed=First element in the sequence] The specified seed value is used as the initial aggregate value.\r\n     * @param {selector} [resultSelector=SELF_SELECTOR] The specified result selector is used to project the aggregated value.\r\n     * @returns {*} The aggregated value.\r\n     */\r\n    aggregate(aggregateFn, seed, resultSelector = SELF_SELECTOR) {\r\n        let iterator = this[Symbol.iterator]();\r\n        if (seed === undefined) {\r\n            let firstItem = iterator.next();\r\n            if (firstItem.done) {\r\n                return resultSelector();\r\n            } else {\r\n                seed = firstItem.value;\r\n            }\r\n        }\r\n\r\n        for (let item = iterator.next(); !item.done; item = iterator.next()) {\r\n            seed = aggregateFn(seed, item.value);\r\n        }\r\n\r\n        return resultSelector(seed);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all elements of a sequence satisfy a condition.\r\n     * @param {predicate} [predicate=ALWAYS TRUE] A function to test each source element for a condition.\r\n     * @returns {boolean}\r\n     */\r\n    all(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (!predicate(item)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Determines whether any element of a sequence exists or satisfies a condition.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {boolean}\r\n     */\r\n    any(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Determines if the sequence contains a specified element by using the equality comparer.\r\n     * @param {*} element The element to compare with.\r\n     * @param {equalityComparer} [equalityComparer] A function to determine equality of each element with specified element.\r\n     */\r\n    contains(element, equalityComparer = DEFAULT_EQUALITY_COMPARER) {\r\n        for (let item of this) {\r\n            if (equalityComparer(item, element)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of elements in a sequence.\r\n     * If a condition is specified then returns a how many elements in the sequence satisfy it.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {Number}\r\n     */\r\n    count(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let count = 0;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns the first element in a sequence that satisfies a specified condition.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence is empty.\r\n     * @throws {Error} If the sequence contains no matching element.\r\n     */\r\n    first(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        throw new Error('Sequence contains no matching element.');\r\n    }\r\n\r\n    /**\r\n     * Returns the first element of the sequence that satisfies a condition or null if no such element is found.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     */\r\n    firstOrDefault(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                return item;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Projects each element of a sequence into a new form.\r\n     * @param {selector} selector A transform function to apply to each element.\r\n     * @returns {Enumerable}\r\n     */\r\n    select(selector = SELF_SELECTOR) {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        let nextItem = iterator.next();\r\n                        if (nextItem.done) {\r\n                            return {\r\n                                done: true\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                value: selector(nextItem.value),\r\n                                done: false\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Projects a collection in each element of a sequence, flattens it.\r\n     * And invokes a result selector function to project the resulting sequence.\r\n     * @param {selector} collectionSelector A function to apply to each element to get the intermediate collection.\r\n     * @param {selector} [resultSelector] A transform function to apply to each element of final flattened sequence.\r\n     * @returns {Enumerable}\r\n    */\r\n    selectMany(collectionSelector = SELF_SELECTOR, resultSelector = SELF_SELECTOR) {\r\n        let parentCollectionIterator = this.select(collectionSelector)[Symbol.iterator](),\r\n            childCollectionIterator = Enumerable.empty()[Symbol.iterator](),\r\n            next = function() {\r\n                let nextChildItem = childCollectionIterator.next();\r\n                if (nextChildItem.done) {\r\n                    let nextParentCollection = parentCollectionIterator.next();\r\n                    if (nextParentCollection.done) {\r\n                        return {\r\n                            done: true\r\n                        };\r\n                    } else {\r\n                        if (!isIterable(nextParentCollection.value)) {\r\n                            throw new TypeError('Collection must be iterable.');\r\n                        }\r\n                        childCollectionIterator = nextParentCollection.value[Symbol.iterator]();\r\n                        return next();\r\n                    }\r\n                } else {\r\n                    return {\r\n                        value: resultSelector(nextChildItem.value),\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Returns the only element of a sequence that satisfies the specified condition.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence is empty.\r\n     * @throws {Error} If the sequence contains no matching element.\r\n     * @throws {Error} If the sequence contains more than one matching element.\r\n     */\r\n    single(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let matched = null;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                if (matched) {\r\n                    throw new Error('Sequence contains more than one matching element');\r\n                } else {\r\n                    matched = item;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (matched) {\r\n            return matched;\r\n        }\r\n\r\n        throw new Error('Sequence contains no matching element.');\r\n    }\r\n\r\n    /**\r\n     * Returns the only element of a sequence that satisfies a specified condition or null if no such element exists.\r\n     * @param {predicate} [predicate] A function to test each source element for a condition.\r\n     * @returns {*}\r\n     * @throws {Error} If the sequence contains more than one matching element.\r\n     */\r\n    singleOrDefault(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let matched = null;\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                if (matched) {\r\n                    throw new Error('Sequence contains more than one matching element');\r\n                } else {\r\n                    matched = item;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (matched) {\r\n            return matched;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Skips the specified number of elements of a sequence.\r\n     * @param {Number} [count=0] The number of elements to skip.\r\n     * @returns {Enumerable}\r\n     */\r\n    skip(count = 0) {\r\n        let iterator = this.iterable[Symbol.iterator](),\r\n            index = 0,\r\n            next = function() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (index++ < count) {\r\n                    return next();\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Skips elements in a sequence as long as a specified condition is true and then returns the remaining elements.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    skipWhile(predicate = ALWAYS_FALSE_PREDICATE) {\r\n        let iterator = this.iterable[Symbol.iterator](),\r\n            continueSkip = true,\r\n            next = function() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (continueSkip && predicate(nextItem.value)) {\r\n                    return next();\r\n                } else {\r\n                    continueSkip = false;\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns a specified number of elements from the begining of a sequence.\r\n     * @param {Number} [count=0] The number of elements to return.\r\n     * @returns {Enumerable}\r\n     */\r\n    take(count = 0) {\r\n        let iterator = this.iterable[Symbol.iterator](),\r\n            index = 0,\r\n            next = function() {\r\n                let nextItem = iterator.next();\r\n                index++;\r\n                if (nextItem.done || (index > count)) {\r\n                    return { done: true };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns elements in a sequence as long as a specified condition is true.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    takeWhile(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let iterator = this.iterable[Symbol.iterator](),\r\n            continueTake = true,\r\n            next = function() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return { done: true };\r\n                } else if (continueTake && predicate(nextItem.value)) {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                } else {\r\n                    continueTake = false;\r\n                    return { done: true };\r\n                }\r\n            };\r\n\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns an array. This method forces immediate evaluation and returns an array that contains the results. \r\n     * @returns {Array}\r\n     */\r\n    toArray() {\r\n        return Array.from(this);\r\n    }\r\n\r\n    /**\r\n     * Filters a collection of values based on a predicate.\r\n     * @param {predicate} predicate A function to test each source element for a condition.\r\n     * @returns {Enumerable}\r\n     */\r\n    where(predicate = ALWAYS_TRUE_PREDICATE) {\r\n        let iterator = this.iterable[Symbol.iterator](),\r\n            next = function() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    if (predicate(nextItem.value)) {\r\n                        return {\r\n                            value: nextItem.value,\r\n                            done: false\r\n                        };\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates an Enumerable from iterable collections.\r\n     * @param {iterable} source A iterable source.\r\n     * @returns {Enumerable}\r\n     */\r\n    static from(source) {\r\n        return new Enumerable(source);\r\n    }\r\n\r\n    /**\r\n     * Returns an empty Enumerable.\r\n     * @returns {Enumerable}\r\n     */\r\n    static empty() {\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        return {\r\n                            done: true\r\n                        };\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Iterator\r\n     */\r\n    [Symbol.iterator]() {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return {\r\n            next() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\nfunction isIterable(obj) {\r\n    return obj[Symbol.iterator] && (typeof obj[Symbol.iterator] === 'function');\r\n}\r\n\r\nexport {Enumerable};"]}