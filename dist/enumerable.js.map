{"version":3,"sources":["../src/enumerable.js"],"names":[],"mappings":";;;;;AAAA,MAAM,UAAN,CAAiB;AACb,gBAAY,QAAZ,EAAsB;AAClB,YAAI,WAAW,QAAX,CAAJ,EAA0B;AACtB,iBAAK,QAAL,GAAgB,QAAhB,CADsB;SAA1B,MAEO;AACH,kBAAM,IAAI,SAAJ,CAAc,mBAAd,CAAN,CADG;SAFP;KADJ;;AAQA,UAAM,SAAN,EAAiB;AACb,YAAI,WAAW,KAAK,QAAL,CAAc,OAAO,QAAP,CAAd,EAAX;YACA,OAAO,YAAW;AACd,gBAAI,WAAW,SAAS,IAAT,EAAX,CADU;AAEd,gBAAI,SAAS,IAAT,EAAe;AACf,uBAAO;AACH,0BAAM,IAAN;iBADJ,CADe;aAAnB,MAIO;AACH,oBAAI,UAAU,SAAS,KAAT,CAAd,EAA+B;AAC3B,2BAAO;AACH,+BAAO,SAAS,KAAT;AACP,8BAAM,KAAN;qBAFJ,CAD2B;iBAA/B,MAKO;AACH,2BAAO,MAAP,CADG;iBALP;aALJ;SAFG,CAFE;AAmBb,eAAO,IAAI,UAAJ,CAAe;AAClB,aAAC,OAAO,QAAP,IAAmB;AAChB,uBAAO;AACH,0BAAM,IAAN;iBADJ,CADgB;aAApB;SADG,CAAP,CAnBa;KAAjB;;AA4BA,WAAO,QAAP,EAAiB;AACb,YAAI,WAAW,KAAK,QAAL,CAAc,OAAO,QAAP,CAAd,EAAX,CADS;AAEb,eAAO,IAAI,UAAJ,CAAe;AAClB,aAAC,OAAO,QAAP,IAAmB;AAChB,uBAAO;AACH,2BAAO;AACH,4BAAI,WAAW,SAAS,IAAT,EAAX,CADD;AAEH,4BAAI,SAAS,IAAT,EAAe;AACf,mCAAO;AACH,sCAAM,IAAN;6BADJ,CADe;yBAAnB,MAIO;AACH,mCAAO;AACH,uCAAO,SAAS,SAAS,KAAT,CAAhB;AACA,sCAAM,KAAN;6BAFJ,CADG;yBAJP;qBAFJ;iBADJ,CADgB;aAApB;SADG,CAAP,CAFa;KAAjB;;AAuBA,KAAC,OAAO,QAAP,IAAmB;AAChB,YAAI,WAAW,KAAK,QAAL,CAAc,OAAO,QAAP,CAAd,EAAX,CADY;AAEhB,eAAO;AACH,mBAAO;AACH,oBAAI,WAAW,SAAS,IAAT,EAAX,CADD;AAEH,oBAAI,SAAS,IAAT,EAAe;AACf,2BAAO;AACH,8BAAM,IAAN;qBADJ,CADe;iBAAnB,MAIO;AACH,2BAAO;AACH,+BAAO,SAAS,KAAT;AACP,8BAAM,KAAN;qBAFJ,CADG;iBAJP;aAFJ;SADJ,CAFgB;KAApB;;AAmBA,WAAO,IAAP,CAAY,MAAZ,EAAoB;AAChB,eAAO,IAAI,UAAJ,CAAe,MAAf,CAAP,CADgB;KAApB;CA/EJ;;AAoFA,SAAS,UAAT,CAAoB,GAApB,EAAyB;AACrB,WAAO,IAAI,OAAO,QAAP,CAAJ,IAAyB,OAAO,IAAI,OAAO,QAAP,CAAX,KAAgC,UAAhC,CADX;CAAzB;;QAIQ","file":"enumerable.js","sourcesContent":["class Enumerable {\r\n    constructor(iterable) {\r\n        if (isIterable(iterable)) {\r\n            this.iterable = iterable;\r\n        } else {\r\n            throw new TypeError('Must be iterable.');\r\n        }\r\n    }\r\n\r\n    where(predicate) {\r\n        let iterator = this.iterable[Symbol.iterator](),\r\n            next = function() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    if (predicate(nextItem.value)) {\r\n                        return {\r\n                            value: nextItem.value,\r\n                            done: false\r\n                        };\r\n                    } else {\r\n                        return next();\r\n                    }\r\n                }\r\n            };\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next: next\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    select(selector) {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return new Enumerable({\r\n            [Symbol.iterator]() {\r\n                return {\r\n                    next() {\r\n                        let nextItem = iterator.next();\r\n                        if (nextItem.done) {\r\n                            return {\r\n                                done: true\r\n                            };\r\n                        } else {\r\n                            return {\r\n                                value: selector(nextItem.value),\r\n                                done: false\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        let iterator = this.iterable[Symbol.iterator]();\r\n        return {\r\n            next() {\r\n                let nextItem = iterator.next();\r\n                if (nextItem.done) {\r\n                    return {\r\n                        done: true\r\n                    };\r\n                } else {\r\n                    return {\r\n                        value: nextItem.value,\r\n                        done: false\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    static from(source) {\r\n        return new Enumerable(source);\r\n    }\r\n}\r\n\r\nfunction isIterable(obj) {\r\n    return obj[Symbol.iterator] && (typeof obj[Symbol.iterator] === 'function');\r\n}\r\n\r\nexport {Enumerable};"]}